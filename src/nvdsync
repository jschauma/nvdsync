#! /bin/sh
#
# Copyright (c) 2013 Twitter, Inc.
#
# Originally written by Jan Schaumann <jschauma@netmeister.org> in May 2013.
#
# This script fetches NIST's NVD data and cross-references the CVEs with
# Jira tickets.

#set -e

###
### Globals
###

umask 077

NVD_RECENT_URL="https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-recent.xml"
NVD_MODIFIED_URL="https://nvd.nist.gov/feeds/xml/cve/nvdcve-2.0-modified.xml"

PROGNAME="${0##*/}"
TDIR="$(mktemp -d "${TMPDIR:-/tmp}/${PROGNAME}.XXXX")"
VERBOSITY=0
VFLAGS=""

###
### Functions
###

cleanup() {
	rm -fr "${TDIR}"
}

crossReferenceWithJira() {
	verbose "Cross-referencing with Jira..."
	(
		# XXX: This is far from ideal: wget(1) requires
		# the proxy, but nvdXjira does not.  nvdXjira uses
		# python's urllib2, which will use a proxy if the
		# https_proxy environment variable is set.  So we nuke it
		# here.  If you ever want to use the proxy from the
		# environment in nvdXjira in this context, you're SOL.
		unset https_proxy
		cd ${TDIR}
		for f in *; do
			verbose "Processing ${f}..." 2
			nvdXjira ${VFLAGS} -n ${NVDXJIRA_FLAGS} <${f}
		done
	)
}

fetchNVDData() {
	local code file url

	verbose "Fetching NVD Data..."

	for url in ${NVD_RECENT_URL} ${NVD_MODIFIED_URL}; do
		verbose "Fetching ${url}..." 2
		file=$(basename ${url})

		eval wget --quiet ${WGET_FLAGS} -O "${TDIR}/${file}" "${url}"
		if [ $? -gt 0 ]; then
			echo "Unable to fetch '${url}'." >&2
			exit 1
			# NOTREACHED
		fi
	done
}

usage() {
	cat <<EOH
Usage: ${PROGNAME} [-hv]
	-h  print this help and exit
	-v  be verbose
EOH
}


# purpose : check that all important variables are set correctly
# input   : none
# output  : none, globals may have been modified, may abort on error

varCheck() {
	local file

	verbose "Checking that all variables look ok..."
}


verbose() {
	local msg="${1}"
	local level="${2:-1}"
	local i=0

	if [ ${level} -le ${VERBOSITY} ]; then
		while [ ${i} -lt ${level} ]; do
			printf "=" >&2
			i=$(( ${i} + 1 ))
		done
		echo "> ${msg}" >&2
	fi
}


###
### Main
###

trap 'cleanup' 0

while getopts 'hv' opt; do
	case ${opt} in
		h\?)
			usage
			exit 0
			# NOTREACHED
		;;
		v)
			VERBOSITY=$(( ${VERBOSITY} + 1 ))
			VFLAGS="-v ${VFLAGS}"
		;;
		*)
			usage
			exit 1
			# NOTREACHED
		;;
	esac
done
shift $(($OPTIND - 1))

if [ $# -ne 0 ]; then
	usage
	exit 1
	# NOTREACHED
fi

varCheck
fetchNVDData
crossReferenceWithJira

exit 0
